# a)
# Convert chess board position, like "A1", to a 2D point, like [1, 1].
pos-to-point: (pos :Str -> :Arr) {
    0 pos1!
    0 pos2!
    pos 0 get x!
    {
        {x "a" = x "A" = or} {1 pos1!}
        {x "b" = x "B" = or} {2 pos1!}
        {x "c" = x "C" = or} {3 pos1!}
        {x "d" = x "D" = or} {4 pos1!}
        {x "e" = x "E" = or} {5 pos1!}
        {x "f" = x "F" = or} {6 pos1!}
        {x "g" = x "G" = or} {7 pos1!}
        {x "h" = x "H" = or} {8 pos1!}
    } cond
    pos 1 get int pos2!
        [pos1 pos2]
} fun

test-pos-to-point: {
    "a1" pos-to-point [1 1] test=
    "A1" pos-to-point [1 1] test=
    "h8" pos-to-point [8 8] test=
    "B6" pos-to-point [2 6] test=
    # a) further examples
} fun

 test-pos-to-point

# b)
# Check whether p is a valid chess board position of the Form "[0 2]".
point-valid: (p :Arr -> :Bool) {
    p 0 get pos1!
    p 1 get pos2!
    8 pos1 >= 1 pos1 <= and 8 pos2 >= 1 pos2 <= and and
} fun

test-point-valid: {
    [1 1] point-valid true test=
    [8 8] point-valid true test=
    [8 9] point-valid false test=
    [9 8] point-valid false test=
    [2 0] point-valid false test=
    # b) further examples
} fun

test-point-valid

# c)
# Convert 2D point of the form [1, 1] to a chess board position of the form "A1".
point-to-pos: (a :Arr -> :Str) {
    "" returnstring!
    a 0 get pos1!
    a 1 get pos2!
    ["1" "A" "2" "B" "3" "C" "4" "D" "5" "E" "6" "F" "7" "G" "8" "H"]
    pos1 str get returnstring + 
    pos2 str + 
} fun

test-point-to-pos: {
    [1 1] point-to-pos "A1" test=
    [2 2] point-to-pos "B2" test=
    [4 2] point-to-pos "D2" test=
    # c) further examples
} fun

test-point-to-pos

# d)
# Computes the possible next positions of the knight (Springer) given its current position.
knight-next-positions: (p :Str -> :Arr) {
    # Convert Position to Point
    p pos-to-point p!
    # Element zero is px
    # Elment 1 is py
    p .0 px!
    p .1 py!
    # create all possible positions (some of which may not be on the board)
    # All possible combinations of 1 and 2 and with both minus and plus all saved in the array of a
    [ 
        [px 1 +  py 2 +] 
        [px 2 +  py 1 +] 
        [px 1 +  py 2 -] 
        [px 2 +  py 1 -] 
        [px 1 -  py 2 +] 
        [px 2 -  py 1 +] 
        [px 1 -  py 2 -] 
        [px 2 -  py 1 -] 
    ] a!
    # remove invalid positions (the ones not on the board)
    # iterates over a, dups value of each element, so every element is on the stack twice
    # then checks if point is valid, get bool as return, negates value, if point is not valid pop value from stack (stack empty), if point is valid add position to list (stack is empty again), then sorts array
    # List comprehension :) I feel home again :)
    [a { dup point-valid not {pop} {point-to-pos} if } for] sort
} fun

test-knight-next-positions: {
    "A1" knight-next-positions ["B3", "C2"] test=
    "H8" knight-next-positions ["F7", "G6"] test=
    "H8" knight-next-positions ["F7", "G6"] test=
} fun

test-knight-next-positions

test-stats